[{"c:\\Development\\xerini-code-test\\src\\App.tsx":"1","c:\\Development\\xerini-code-test\\src\\app\\services\\data\\users.ts":"2","c:\\Development\\xerini-code-test\\src\\app\\stores\\_root_store.ts":"3","c:\\Development\\xerini-code-test\\src\\app\\services\\UserService.ts":"4","c:\\Development\\xerini-code-test\\src\\app\\stores\\UserStore.ts":"5","c:\\Development\\xerini-code-test\\src\\app\\services\\agent.ts":"6"},{"size":691,"mtime":1608844531658,"results":"7","hashOfConfig":"8"},{"size":1466,"mtime":1608839258499,"results":"9","hashOfConfig":"8"},{"size":518,"mtime":1608842953730,"results":"10","hashOfConfig":"8"},{"size":1224,"mtime":1608844513906,"results":"11","hashOfConfig":"8"},{"size":880,"mtime":1608843917400,"results":"12","hashOfConfig":"8"},{"size":1543,"mtime":1608831993692,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qvze2q",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"c:\\Development\\xerini-code-test\\src\\App.tsx",["27"],"c:\\Development\\xerini-code-test\\src\\app\\services\\data\\users.ts",[],"c:\\Development\\xerini-code-test\\src\\app\\stores\\_root_store.ts",["28"],"c:\\Development\\xerini-code-test\\src\\app\\services\\UserService.ts",[],"c:\\Development\\xerini-code-test\\src\\app\\stores\\UserStore.ts",[],"c:\\Development\\xerini-code-test\\src\\app\\services\\agent.ts",["29"],"import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n\r\n\r\n//initialze default settings\r\naxios.defaults.baseURL = \"\";\r\n\r\n//initialze the request and response interceptors\r\naxios.interceptors.response.use(undefined, (error: any) => {\r\n  //Handle network error\r\n  if (error.message.include(\"Network Error\") && !error.response) {\r\n    console.log(\r\n      \"Network error. End-user is not connected to the internet or the api is not avilable or doesnt exists\"\r\n    );\r\n  }\r\n\r\n  //Handle requested resource is not found.\r\n  if (error.status == \"404\") {\r\n    console.log(\"API cannot find the requested resource\");\r\n  }\r\n\r\n  //Handle authentication error\r\n  if (error.status === \"401\") {\r\n    console.log(\"User is unauthorized\");\r\n  }\r\n\r\n  //Handle server error\r\n\r\n  if (error.status === \"500\") {\r\n    console.log(\"Server error\");\r\n  }\r\n\r\n  throw error.response;\r\n});\r\n\r\naxios.interceptors.request.use(\r\n  (request: AxiosRequestConfig) => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    request.headers.Authorization = `Bearer ${token}`;\r\n    return request;\r\n  },\r\n  (error: any) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\nexport const  requests = {\r\n    get : (path:string)=>axios.get(path).then(responseBody),\r\n    post : (path:string,body:{}) => axios.post(path, body).then(responseBody),\r\n    put : (path:string,body:{}) => axios.put(path, body).then(responseBody),\r\n    del : (path:string) => axios.delete(path).then(responseBody),\r\n\r\n}\r\n",{"ruleId":"30","severity":1,"message":"31","line":9,"column":12,"nodeType":"32","messageId":"33","endLine":9,"endColumn":20},{"ruleId":"30","severity":1,"message":"34","line":4,"column":9,"nodeType":"32","messageId":"33","endLine":4,"endColumn":20},{"ruleId":"35","severity":1,"message":"36","line":17,"column":20,"nodeType":"37","messageId":"38","endLine":17,"endColumn":22},"@typescript-eslint/no-unused-vars","'hasError' is assigned a value but never used.","Identifier","unusedVar","'UserService' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]